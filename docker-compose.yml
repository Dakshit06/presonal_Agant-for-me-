version: '3.8'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: ankane/pgvector:latest
    container_name: agentice-postgres
    environment:
      POSTGRES_USER: agentice
      POSTGRES_PASSWORD: password
      POSTGRES_DB: agentice
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentice"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    container_name: agentice-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentice-api
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./data:/data
      - ./config:/config
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentice-celery-worker
    env_file:
      - .env
    volumes:
      - ./src:/app/src
      - ./data:/data
      - ./config:/config
    depends_on:
      - redis
      - postgres
    command: celery -A src.worker.celery_app worker --loglevel=info

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentice-celery-beat
    env_file:
      - .env
    volumes:
      - ./src:/app/src
      - ./data:/data
      - ./config:/config
    depends_on:
      - redis
      - postgres
    command: celery -A src.worker.celery_app beat --loglevel=info

  # Flower for Celery monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentice-flower
    env_file:
      - .env
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-worker
    command: celery -A src.worker.celery_app flower --port=5555

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: agentice-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: agentice-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
